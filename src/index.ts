import { app, BrowserWindow, ipcMain } from "electron";
import detect from "detect-port";
import isDev from "electron-is-dev";
import path from "path";
import { spawn, exec } from "child_process";
import yaml from "js-yaml";
import { AddressInfo } from "net";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

import fs from "fs-extra";
import express from "express";

let port = 4444;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = async () => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 1000,
    width: 1000,
    minHeight: 800,
    minWidth: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      webSecurity: false,
      allowRunningInsecureContent: true,
    },
  });

  // Start Hedy server
  port = await detect(port);

  const adventures = getHedyAdventures(["en", "nl"]);

  const resourcePath = !isDev
    ? process.resourcesPath // Live Mode
    : __dirname; // Dev Mode

  const hedyPath = path.join(resourcePath, isDev ? "../../hedy" : "./hedy");

  const pythonPath = path.join(resourcePath, isDev ? "../../venv/bin/python" : "./venv/bin/python");

  const child = spawn(`cd ${hedyPath} && PORT=${port} ${pythonPath} app.py`, {
    shell: true,
  });

  child.stdout.on("data", (data) => {
    console.log(`child stdout:\n${data}`);
  });

  child.stderr.on("data", (data) => {
    console.error(`child stderr:\n${data}`);
  });

  ipcMain.handle("port", () => port);
  ipcMain.handle("adventures", () => adventures);

  if (isDev) {
    // Create the browser window.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
    mainWindow.webContents.openDevTools();
  } else {
    const exApp = express();
    exApp.use(express.static(path.join(resourcePath, "app", ".webpack", "renderer")));
    const server = exApp.listen(0, () => {
      const { port } = server.address() as AddressInfo;
      mainWindow.loadURL(`http://localhost:${port}/main_window`);
      console.log(`port is ${port}`);
    });
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

app.on("quit", () => {
  exec(`kill -9 $(lsof -t -i:${port})`);
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

const getHedyAdventures = (languages: string | string[]) => {
  const resourcePath = !isDev
    ? process.resourcesPath // Live Mode
    : __dirname; // Dev Mode

  const adventuresPath = path.join(resourcePath, isDev ? "../../hedy/content/adventures" : "./hedy/content/adventures");
  const fileNames = fs.readdirSync(adventuresPath);
  const adventureFiles = fileNames.filter((fileName) => languages.includes(fileName.split(".")[0]));
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const data: any = {};
  adventureFiles.forEach((fileName) => {
    const code = fileName.split(".")[0];
    const filePath = path.join(adventuresPath, fileName);
    const buffer = fs.readFileSync(filePath);
    const content = buffer.toString();
    const adventure = yaml.load(content);
    data[code] = adventure;
  });

  return data;
};
